/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Dimension;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.WindowEvent;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.WindowConstants;
import javax.swing.table.TableModel;
import learning.EpsilonGreedy;
import learning.ExperimentData;
import learning.Learner;
import learning.Matrix;
import learning.Policy;
import learning.QLearner;
import learning.SARSA;
import learning.Softmax;

/**
 * MainFrame is the principal user interface for running RlSim.
 * It provides a main method and all hookups for experiments functionality.
 * @author Alessandro Bisiani
 * @version v1.0 - 1 May 2015
 */
public class MainFrame extends javax.swing.JFrame implements Runnable{

    private JFrame tempLabelFrame;
    private JFrame tempSavingFrame;
    private JFrame tempExportFrame;
    private JFrame tempOpeningFrame;
    private String[] stateSpace = {"state1","state2","state3","state4","state5"};
    private Learner learner;
    private Thread learningThread;
    public ExperimentData data;
    private final String[] POLICIES = {"É›-Greedy","Softmax","Random"};
    private final String[] LEARNING_ALGORITHMS = {"Q-Learning", "SARSA"};
    
    
    public MainFrame() {
        initComponents();
        learner = null;
        data = new ExperimentData();
        /*tempLabelFrame  = new JFrame();
        tempSavingFrame = new JFrame();
        tempExportFrame = new JFrame();*/
        
        //Resize events trigger an evaluation of whether to use AUTO_RESIZE or not. 
        //The result is the table fills the JScrollPane until it won't fit, then assumes the preferred size and creates a scroll bar.
        rMatrix.getParent().addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(final ComponentEvent e) {
                if (rMatrix.getPreferredSize().width < rMatrix.getParent().getWidth()) {
                    rMatrix.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
                } else {
                    rMatrix.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                }
            }
        });
        qMatrix.getParent().addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(final ComponentEvent e) {
                if (qMatrix.getPreferredSize().width < qMatrix.getParent().getWidth()) {
                    qMatrix.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
                } else {
                    qMatrix.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jMenuItem1 = new javax.swing.JMenuItem();
        qMatrixScrollPane = new javax.swing.JScrollPane();
        qMatrix = new javax.swing.JTable();
        rMatrixScrollPane = new javax.swing.JScrollPane();
        rMatrix = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        interruptButton = new javax.swing.JButton();
        newMatrixButton = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        resetExperimentButton = new javax.swing.JButton();
        runningJLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        episodesJTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        policyComboBox = new javax.swing.JComboBox();
        epsilonJTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        gammaJTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        alphaJTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        temperatureRateJTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        algorithmComboBox = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        initialStateJTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        goalStateJTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        initialTempJTextField = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        exportMenuItem = new javax.swing.JMenuItem();
        exportMatricesMenuItem = new javax.swing.JMenuItem();
        quitMenuItem = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        qMatrixScrollPane.setBorder(null);

        qMatrix.setModel(new Matrix(new String[][] {{"state1","0","0","0","0","0"},
            {"state2","0","0","0","0","0"},
            {"state3","0","0","0","0","0"},
            {"state4","0","0","0","0","0"},
            {"state5","0","0","0","0","0"}},
        new String[] {"","state1","state2","state3","state4",
            "state5"})
    );
    qMatrix.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
    qMatrix.setColumnSelectionAllowed(true);
    qMatrixScrollPane.setViewportView(qMatrix);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.gridwidth = 5;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 692;
    gridBagConstraints.ipady = 455;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(6, 18, 0, 10);
    getContentPane().add(qMatrixScrollPane, gridBagConstraints);

    rMatrixScrollPane.setBorder(null);

    rMatrix.setModel(new Matrix(new String[][] {{"state1","","","","",""},
        {"state2","","","","",""},
        {"state3","","","","",""},
        {"state4","","","","",""},
        {"state5","","","","",""}},
    new String[] {"","state1","state2","state3","state4",
        "state5"}));
/*
rMatrix.setModel(new javax.swing.table.DefaultTableModel(

new Object[][]     {{0,0,0,0},
    {0,0,0,0},
    {0,0,0,0},
    {0,0,0,0}},

    new String[] {"1","2","3","4"}

    ));
    */
    rMatrix.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
    rMatrix.setColumnSelectionAllowed(true);
    rMatrixScrollPane.setViewportView(rMatrix);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.gridwidth = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 729;
    gridBagConstraints.ipady = 455;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(6, 8, 0, 0);
    getContentPane().add(rMatrixScrollPane, gridBagConstraints);

    jLabel1.setText("Reward Matrix");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(18, 8, 0, 0);
    getContentPane().add(jLabel1, gridBagConstraints);

    jLabel2.setText("Q Matrix");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(18, 18, 0, 0);
    getContentPane().add(jLabel2, gridBagConstraints);

    interruptButton.setText("Interrupt");
    interruptButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            interruptButtonActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 6;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(6, 18, 0, 0);
    getContentPane().add(interruptButton, gridBagConstraints);

    newMatrixButton.setText("New Matrix");
    newMatrixButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            newMatrixButtonActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
    getContentPane().add(newMatrixButton, gridBagConstraints);

    runButton.setText("Run");
    runButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            runButtonActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.ipadx = 22;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(6, 18, 0, 0);
    getContentPane().add(runButton, gridBagConstraints);

    resetExperimentButton.setText("Reset Experiment");
    resetExperimentButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            resetExperimentButtonActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
    getContentPane().add(resetExperimentButton, gridBagConstraints);

    runningJLabel.setText(" ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 7;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.ipadx = 129;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(11, 18, 0, 0);
    getContentPane().add(runningJLabel, gridBagConstraints);

    jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jPanel2.setAutoscrolls(true);

    episodesJTextField.setText("1000");
    episodesJTextField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            episodesJTextFieldActionPerformed(evt);
        }
    });

    jLabel4.setText("Episodes");

    jLabel7.setText("Policy");

    policyComboBox.setModel(new javax.swing.DefaultComboBoxModel(POLICIES));
    policyComboBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            policyComboBoxActionPerformed(evt);
        }
    });

    epsilonJTextField.setText("0.35");

    jLabel10.setText("Epsilon(Îµ)");

    gammaJTextField.setText("0.8");

    jLabel6.setText("Discount Factor(Î³)");

    jLabel5.setText("Learning Rate(Î±)");

    alphaJTextField.setText("0.5");
    alphaJTextField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            alphaJTextFieldActionPerformed(evt);
        }
    });

    jLabel3.setText("Temperature Decrease Rate");

    temperatureRateJTextField.setText("0.005");

    jLabel8.setText("Algorithm");

    algorithmComboBox.setModel(new javax.swing.DefaultComboBoxModel(LEARNING_ALGORITHMS));
    algorithmComboBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            algorithmComboBoxActionPerformed(evt);
        }
    });

    jLabel13.setText("Initial State");

    initialStateJTextField.setText("state1");
    initialStateJTextField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            initialStateJTextFieldActionPerformed(evt);
        }
    });

    jLabel12.setText("Goal State");

    goalStateJTextField.setText("state5");

    jLabel9.setText("Initial Temperature");

    initialTempJTextField.setText("10");

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel10)
                        .addComponent(jLabel4))
                    .addGap(6, 6, 6)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(epsilonJTextField)
                        .addComponent(episodesJTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)))
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addGap(6, 6, 6))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel8)
                            .addGap(3, 3, 3)))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(policyComboBox, 0, 113, Short.MAX_VALUE)
                        .addComponent(algorithmComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(58, 58, 58)
                    .addComponent(jLabel9)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(initialTempJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel3)
                        .addComponent(jLabel6)
                        .addComponent(jLabel5))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(alphaJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(gammaJTextField)
                            .addComponent(temperatureRateJTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)))))
            .addGap(18, 18, 18)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jLabel12)
                .addComponent(jLabel13))
            .addGap(18, 18, 18)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(initialStateJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(goalStateJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(799, Short.MAX_VALUE))
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(44, 44, 44)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGap(2, 2, 2)
                                    .addComponent(jLabel7))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(policyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(temperatureRateJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel12)
                                    .addComponent(goalStateJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(initialTempJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel9)
                                .addComponent(jLabel13)
                                .addComponent(initialStateJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(epsilonJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addComponent(jLabel10))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(gammaJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))))
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(algorithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(episodesJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(alphaJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)))
            .addContainerGap(9, Short.MAX_VALUE))
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 9;
    gridBagConstraints.ipadx = 793;
    gridBagConstraints.ipady = 3;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 10);
    getContentPane().add(jPanel2, gridBagConstraints);

    jMenu1.setText("File");

    openMenuItem.setText("Open");
    openMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            openMenuItemActionPerformed(evt);
        }
    });
    jMenu1.add(openMenuItem);

    saveMenuItem.setText("Save");
    saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            saveMenuItemActionPerformed(evt);
        }
    });
    jMenu1.add(saveMenuItem);

    exportMenuItem.setText("Export");
    exportMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            exportMenuItemActionPerformed(evt);
        }
    });
    jMenu1.add(exportMenuItem);

    exportMatricesMenuItem.setText("Export As Matrices");
    exportMatricesMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            exportMatricesMenuItemActionPerformed(evt);
        }
    });
    jMenu1.add(exportMatricesMenuItem);

    quitMenuItem.setText("Quit");
    quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            quitMenuItemActionPerformed(evt);
        }
    });
    jMenu1.add(quitMenuItem);

    jMenuBar1.add(jMenu1);

    setJMenuBar(jMenuBar1);

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void algorithmComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algorithmComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_algorithmComboBoxActionPerformed

    
    private void interruptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interruptButtonActionPerformed
        
        learningThread.interrupt();
        setRunningJLabel("");
        //Matrix m = (Matrix)rMatrix.getModel();
        //System.out.println(m.getStatesLength()+" va la");
        //System.out.println(new QLearner(rMatrix,qMatrix,1,this).getClass().getName());
        /*
        if(tempLabelFrame != null){
           System.out.println("still ref");
        } else {
           System.out.println("nothing to see here");
        }
        
            File f = new File(".");
            System.out.println(f.getAbsolutePath());
        
            qLearner.setTDThreshold(Double.parseDouble(tdThresholdJTextField.getText()));
            qLearner.setPolicy(new EpsilonGreedy(qLearner,Double.parseDouble(epsilonJTextField.getText())));
            qLearner.setAlpha(Double.parseDouble(alphaJTextField.getText()));
            qLearner.setGamma(Double.parseDouble(gammaJTextField.getText()));
            int ep = Integer.parseInt(episodesJTextField.getText());
            for(int i=0;i<ep;i++){
            resetQMatrix();
            qLearner.episode();
            }
            
            System.out.println(rMatrix.getModel().getValueAt(0,0));
            System.out.println(rMatrix.getModel().getValueAt(1,1));
            System.out.println(rMatrix.getModel().getValueAt(2,2));
            Object o = rMatrix.getModel().getValueAt(2,2);
            String s = "";
            int i = 0;
            if(o instanceof Integer){
            i = (Integer)rMatrix.getModel().getValueAt(2,2) + (Integer)rMatrix.getModel().getValueAt(2,2);
            System.out.println(i);
            } else if(o instanceof String){
            s = (String)rMatrix.getModel().getValueAt(2,2) + (String)rMatrix.getModel().getValueAt(2,2);
            System.out.println(s);
            }
            System.out.println(o.getClass());
            */
            
            //rMatrix.setModel(new DefaultTableModel(new Object[][] {{1,2,3},{4,5,6}}, new String[] {"s1","s2","s3"}));
            //System.out.println(qMatrix.getValueAt(0,0));        //Test of whether getValueAt() returns the value displayed by the table which may be arbitrarily modified.
            //System.out.println(qMatrix.getModel().getValueAt(0,0));//Test that the TableModel assoc with the JTable is updated alongside the graphical representation.
            //rMatrix.setModel(new RMatrix());
        
    }//GEN-LAST:event_interruptButtonActionPerformed

    private void episodesJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_episodesJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_episodesJTextFieldActionPerformed

    private void newMatrixButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMatrixButtonActionPerformed
        if(tempLabelFrame != null && tempLabelFrame.isVisible()){
            //do nothing
        } else if (tempLabelFrame != null && !tempLabelFrame.isVisible()){
            createStateSpaceFrame();
        } else {
            createStateSpaceFrame();
        }
    }//GEN-LAST:event_newMatrixButtonActionPerformed

    private void createStateSpaceFrame(){
        tempLabelFrame = new JFrame("State Space");
        tempLabelFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        tempLabelFrame.getContentPane().add(new StateSpacePanel(this));
        tempLabelFrame.pack();
        tempLabelFrame.setVisible(true);
    }
    
    //Return whatever policy is selected in the user interface
    private String getPolicy(){
        return (String) policyComboBox.getSelectedItem();
    }
    //Return whatever algorithm is selected in the user interface
    private String getAlgorithm(){
        return (String) algorithmComboBox.getSelectedItem();
    }
    
    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        //create a fresh learner with ref to the JTables and the experiment size
        //TEST
        //System.out.println(learningThread.getState().toString());
        //System.out.println("Find This Mark");
        if(/*(learningThread.getState()!=Thread.State.TERMINATED && learningThread.getState()!=Thread.State.NEW) ||*/ Integer.parseInt(episodesJTextField.getText()) > 5000){
            return;
        }
        setRunningJLabel("");
        switch (getAlgorithm()){
            case "Q-Learning":  QLearner qL =new QLearner(qMatrix, rMatrix,Integer.parseInt(episodesJTextField.getText()),this);
                                qL.setAlpha(Double.parseDouble(alphaJTextField.getText()));
                                qL.setGamma(Double.parseDouble(gammaJTextField.getText()));
                                data.setAlpha(Double.parseDouble(alphaJTextField.getText()));
                                data.setGamma(Double.parseDouble(gammaJTextField.getText()));
                                learner = qL;
                                break;
            case "SARSA":       SARSA sa = new SARSA(qMatrix, rMatrix,Integer.parseInt(episodesJTextField.getText()),this);
                                sa.setAlpha(Double.parseDouble(alphaJTextField.getText()));
                                sa.setGamma(Double.parseDouble(gammaJTextField.getText()));
                                data.setAlpha(Double.parseDouble(alphaJTextField.getText()));
                                data.setGamma(Double.parseDouble(gammaJTextField.getText()));
                                learner = sa;
                                break;
        }
        switch(getPolicy()){
            case "É›-Greedy":    Policy eG = new EpsilonGreedy(Double.parseDouble(epsilonJTextField.getText()));
                                learner.setPolicy(eG); 
                                data.setPolicy(getPolicy());
                                data.setEpsilon(Double.parseDouble(epsilonJTextField.getText()));
                                break;
            case "Softmax":     Policy sM = new Softmax(Double.parseDouble(temperatureRateJTextField.getText()), Double.parseDouble(initialTempJTextField.getText()));
                                //TEST
                                //System.out.println("Sbarz " + Double.parseDouble(temperatureRateJTextField.getText()));
                                //System.out.println("Sbarz " + data.getStepsXEpisode());
                                //System.out.println("Sbarz " + data.getStepsXEpisode().size()+1);
                                learner.setPolicy(sM);
                                data.setInitialTemperature(Double.parseDouble(initialTempJTextField.getText()));
                                data.setTemperatureRate(Double.parseDouble(temperatureRateJTextField.getText()));
                                data.setPolicy(getPolicy());
                                break;
            case "Random":      Policy ran = new EpsilonGreedy(1);
                                learner.setPolicy(ran);
                                data.setPolicy(getPolicy());
                                break;
        }
        
        data.setAlgorithm(getAlgorithm());
        learner.setGoalState(goalStateJTextField.getText());
        learner.setInitialState(initialStateJTextField.getText());
        data.setGoalState(goalStateJTextField.getText());
        data.setInitialState(initialStateJTextField.getText());
        
        learningThread = new Thread(learner);
        learningThread.start();
    }//GEN-LAST:event_runButtonActionPerformed

    private void resetExperimentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetExperimentButtonActionPerformed
        /*episodesJTextField.setText("10");
        gammaJTextField.setText("0.8");
        alphaJTextField.setText("0.5");
        epsilonJTextField.setText("0.35");
        temperatureRateJTextField.setText("0.005");*/
        goalStateJTextField.setText("25");
        initialStateJTextField.setText("1");
        
        setSAExperimentMatrices();
        resetQMatrix();
        data.resetData();
    }//GEN-LAST:event_resetExperimentButtonActionPerformed

    private void initialStateJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initialStateJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_initialStateJTextFieldActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        if(tempSavingFrame != null && tempSavingFrame.isVisible()){
            //do nothing
        } else if (tempSavingFrame != null && !tempSavingFrame.isVisible()){
            createSavingFrame();
        } else {
            createSavingFrame();
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed
    private void createSavingFrame(){
        tempSavingFrame = new JFrame("Save File");
        tempSavingFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        tempSavingFrame.getContentPane().add(new SavingPanel(this));
        tempSavingFrame.pack();
        tempSavingFrame.setVisible(true);
    }
    
    /**
     * Takes a URI and attempts to write experiment information to that file.
     * In order, writes the ExperimentData object associated with MainFrame, the states String[], and the reward matrix data String[][], and the Q values String[][].
     * Simply specifying a file name creates the new file in the directory RLSim is launched from.
     * Specifying the name of an existing file overwrites the file without warning.
     * @param uri    The URI of the file being saved to.
     */
    protected void saveExperiment(String uri){
        try {
            FileOutputStream out = new FileOutputStream(uri);
            try (ObjectOutputStream objectOut = new ObjectOutputStream(out)) {
                Matrix rModel = (Matrix) rMatrix.getModel();
                Matrix qModel = (Matrix) qMatrix.getModel();
                //states includes the empty first column. Save the array without that column.
                String[] tempStates = rModel.getStates();
                String[] states = new String[rModel.getStates().length-1];
                for(int i=0;i<states.length;i++){
                    states[i] = tempStates[i+1];
                }
                String[][] rewardData = rModel.getData();
                String[][] qData = qModel.getData();
                objectOut.writeObject(data);
                objectOut.writeObject(states);
                objectOut.writeObject(rewardData);
                objectOut.writeObject(qData);
                objectOut.flush();
                objectOut.close();
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("FileNotFoundException");
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("IOException");
        } finally {
            closeFrame(tempSavingFrame);
            tempSavingFrame = null;
        }
    }
    
    private void policyComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_policyComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_policyComboBoxActionPerformed

    private void exportMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportMenuItemActionPerformed
        if(tempExportFrame != null && tempExportFrame.isVisible()){
            //do nothing
        } else if (tempExportFrame != null && !tempExportFrame.isVisible()){
            createExportFrame();
        } else {
            createExportFrame();
        }
    }//GEN-LAST:event_exportMenuItemActionPerformed
    private void createExportFrame(){
        tempExportFrame = new JFrame("Export");
        tempExportFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        tempExportFrame.getContentPane().add(new ExportPanel(this));
        tempExportFrame.pack();
        tempExportFrame.setVisible(true);
    }
    
    /**
     * Exports all experiment parameters and Q values per episode to a .csv file specified by uri.
     * Q values exported are those saved in the ExperimentData referred to by public field data in MainFrame.
     * All data per episode is added to the same line. New line inserted after data of every episode is written.
     * Simply specifying a file name creates the new file in the directory RLSim is launched from.
     * Specifying the name of an existing file overwrites the file without warning.
     * @param uri    The URI of the file being saved to.
     */
    protected void exportData(String uri){
        ArrayList<double[]> expData = data.getQValuesPerEpisode();
        ArrayList<Double>   ratioOfQ = data.getRatioOfCumulativeRewards();
        ArrayList<Integer>  stepsXEpisode = data.getStepsXEpisode();
        FileWriter writer = null;
        try {
            writer = new FileWriter(uri+".csv");
            try (BufferedWriter br = new BufferedWriter(writer)) {
                
                StringBuilder sb = new StringBuilder();
                //int matrixSize = expData.get(0).length;
                String nl = System.getProperty("line.separator");
                //add experiment parameters
                sb.append("Algorithm : ");      sb.append(getAlgorithm()); sb.append(","); sb.append(nl);
                sb.append("Policy : ");         sb.append(data.getPolicy());  sb.append(","); sb.append(nl);
                switch(getPolicy()){
                    case "É›-Greedy":    sb.append("Gamma : "); sb.append(data.getGamma()); 
                                        sb.append(","); sb.append(nl);
                                        break;
                    case "Softmax":     sb.append("Initial Temperature: "); sb.append(data.getInitialTemperature());
                                        sb.append(","); sb.append(nl);
                                        sb.append("Temperature Decrease Rate: "); sb.append(data.getTemperatureRate()); 
                                        sb.append(","); sb.append(nl);
                                        break;
                }
                sb.append("Alpha : ");          sb.append(data.getAlpha());              sb.append(","); sb.append(nl);
                sb.append("Initial State : ");  sb.append(data.getInitialState());       sb.append(","); sb.append(nl);
                sb.append("Goal State : ");     sb.append(data.getGoalState());          sb.append(","); sb.append(nl);
                
                sb.append("States:,");
                for(String state : stateSpace){
                    sb.append(state); sb.append(",");
                }
                sb.append(nl); sb.append(nl);
                //sb.append(nl+nl);
                
                sb.append("Episode #,");    sb.append("Steps Per Episode,");  sb.append("Cumulative Weighted Q");
                sb.append(nl);
                for(int i=0;i<expData.size();i++){
                    sb.append((i+1));                   sb.append(",");  
                    sb.append(stepsXEpisode.get(i));    sb.append(",");
                    sb.append(ratioOfQ.get(i));         sb.append(",");
                    double[] ep = expData.get(i);
                    for(int j=0;j<ep.length;j++){
                        sb.append(ep[j]);
                        sb.append(",");
                    }
                    sb.append(nl);
                }
                br.write(sb.toString());
            }
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            if(writer!=null){
                try {
                    writer.close();
                } catch (IOException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            closeFrame(tempExportFrame);
            tempExportFrame = null;
        }
    }
    
    private void exportMatricesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportMatricesMenuItemActionPerformed
        if(tempExportFrame != null && tempExportFrame.isVisible()){
            //do nothing
        } else if (tempExportFrame != null && !tempExportFrame.isVisible()){
            createMatrixExportFrame();
        } else {
            createMatrixExportFrame();
        }
    }//GEN-LAST:event_exportMatricesMenuItemActionPerformed
    private void createMatrixExportFrame(){
        tempExportFrame = new JFrame("Export As Matrices");
        tempExportFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        tempExportFrame.getContentPane().add(new ExportPanel(this));
        tempExportFrame.pack();
        tempExportFrame.setVisible(true);
    }
    /**
     * Exports all experiment parameters and the entire Q matrix per episode to a .csv file specified by uri.
     * QMatrix data is exported in the format in which it appears, in the matrix.
     * Simply specifying a file name creates the new file in the directory RLSim is launched from.
     * Specifying the name of an existing file overwrites the file without warning.
     * @param uri    The URI of the file being saved to.
     */
    protected void exportDataAsMatrices(String uri){
        ArrayList<double[][]> expData = data.getAllData();
        ArrayList<Double>   ratioOfQ = data.getRatioOfCumulativeRewards();
        ArrayList<Integer>  stepsXEpisode = data.getStepsXEpisode();
        FileWriter writer = null;
        try {
            writer = new FileWriter(uri+".csv");
            try (BufferedWriter br = new BufferedWriter(writer)) {
                
                StringBuilder sb = new StringBuilder();
                int matrixSize = expData.get(0).length;
                String nl = System.getProperty("line.separator");
                //add experiment parameters
                sb.append("Algorithm : ");      sb.append(data.getAlgorithm()); sb.append(",");     sb.append(nl);
                sb.append("Policy : ");         sb.append(data.getPolicy());  sb.append(",");       sb.append(nl);
                switch(getPolicy()){
                    case "É›-Greedy":    sb.append("Gamma : "); sb.append(data.getGamma()); sb.append(","); sb.append(nl);
                                        break;
                    case "Softmax":     sb.append("Initial Temperature: ");     sb.append(data.getInitialTemperature());
                                        sb.append(","); sb.append(nl);
                                        sb.append("Temperature Decrease Rate: "); sb.append(data.getTemperatureRate()); sb.append(",");
                                        sb.append(nl);
                                        break;
                }
                sb.append("Alpha : ");          sb.append(data.getAlpha());              sb.append(","); sb.append(nl);
                sb.append("Initial State : ");  sb.append(data.getInitialState());       sb.append(","); sb.append(nl);
                sb.append("Goal State : ");     sb.append(data.getGoalState());          sb.append(","); sb.append(nl);
                sb.append(nl);
                
                
                for(int i=0;i<expData.size();i++){
                    sb.append("Episode # "); sb.append(i+1); sb.append(",");
                    for(String state : stateSpace){
                        sb.append(state); sb.append(",");
                    }   sb.append(nl);
                    
                    for(int row=0;row<matrixSize;row++){
                        sb.append(stateSpace[row]); sb.append(",");
                        for(int column=0;column<matrixSize;column++){
                            sb.append(expData.get(i)[row][column]);
                            sb.append(",");
                        }
                        sb.append(nl);
                    }
                    sb.append(nl); sb.append(nl); sb.append(nl);
                }
                
                sb.append("Episode #,"); sb.append("Steps Per Episode,");  sb.append("Cumulative Weighted Q,");
                sb.append(nl);
                for(int i=0;i<ratioOfQ.size();i++){
                    sb.append(i);                       sb.append(",");
                    sb.append(stepsXEpisode.get(i));    sb.append(",");
                    sb.append(ratioOfQ.get(i));         sb.append(",");
                    sb.append(nl);
                }
                br.write(sb.toString());
            }
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if(writer!=null){
                try {
                    writer.close();
                } catch (IOException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            closeFrame(tempExportFrame);
            tempExportFrame = null;
        }
    }
    
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        if(tempOpeningFrame != null && tempOpeningFrame.isVisible()){
            //do nothing
        } else if (tempOpeningFrame != null && !tempOpeningFrame.isVisible()){
            createOpeningFrame();
        } else {
            createOpeningFrame();
        }
    }//GEN-LAST:event_openMenuItemActionPerformed
    private void createOpeningFrame(){
        tempOpeningFrame = new JFrame("Open Experiment");
        tempOpeningFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        tempOpeningFrame.getContentPane().add(new OpeningPanel(this));
        tempOpeningFrame.pack();
        tempOpeningFrame.setVisible(true);
    }
    /**
     * Takes any file and attempts to read experiment information from it, and set MainFrame to display it.
     * @param uri   The URI of the file being saved to.
     */
    protected void openExperiment(String uri){
        FileInputStream in = null;
        String[] states = null;
        String[][] rewardData = null;
        String[][] qData = null;
        try {
            in = new FileInputStream(uri);
            ObjectInputStream objectIn = new ObjectInputStream(in);
            Object expData = objectIn.readObject();
            Object s = objectIn.readObject();
            Object r = objectIn.readObject();
            Object q = objectIn.readObject();
            
            //TEST
            //System.out.println(data.getClass());
            //System.out.println(s.getClass());
            //System.out.println(r.getClass());
            
            if(expData instanceof ExperimentData){
                //TEST
                //System.out.println("Exp Data got");
                ExperimentData savedData = (ExperimentData) expData;
                data = savedData;
            } else {System.out.println("no experiment data"); }
            if(s instanceof String[]){
                states = (String[]) s;
                //TEST
                //System.out.println("states got " + states.length);
            } else{ System.out.println("no states list"); }
            if(r instanceof String[][]){
                //TEST
                //System.out.println("rewards got");
                rewardData = (String[][]) r;
            } else{System.out.println("no rewards data");}
            if(q instanceof String[][]){
                //TEST
                //System.out.println("Qs got");
                qData = (String[][]) q;
            } else{System.out.println("no Q data");}
            
            objectIn.close();
            
            resetMatrices(states);
            Matrix rModel = (Matrix) rMatrix.getModel();
            Matrix qModel = (Matrix) qMatrix.getModel();
            rModel.setData(rewardData);
            qModel.setData(qData);
                
            episodesJTextField.setText(String.valueOf(data.getStepsXEpisode().size()));
            policyComboBox.setSelectedItem(data.getPolicy());
            algorithmComboBox.setSelectedItem(data.getAlgorithm());
            epsilonJTextField.setText(String.valueOf(data.getEpsilon()));
            //TEST
            //System.out.println(data.getEpsilon()+" epsilon");
            alphaJTextField.setText(String.valueOf(data.getAlpha()));
            //TEST
            //System.out.println(data.getAlpha()+" alpha");
            gammaJTextField.setText(String.valueOf(data.getGamma()));
            //TEST
            //System.out.println(data.getGamma()+ " gamma");
            goalStateJTextField.setText(data.getGoalState());
            //TEST
            //System.out.println(data.getGoalState()+" goal S");
            initialStateJTextField.setText(data.getInitialState());
            //TEST
            //System.out.println(data.getInitialState()+" initial S");
            initialTempJTextField.setText(String.valueOf(data.getInitialTemperature()));
            //TEST
            //System.out.println(data.getInitialTemperature()+" initial temp");
            temperatureRateJTextField.setText(String.valueOf(data.getTemperatureRate()));
            //TEST
            //System.out.println(String.valueOf(data.getTemperatureRate()) +" temp");
            
                
            } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if(in!=null){
                    in.close();
                }
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            closeFrame(tempOpeningFrame);
            tempOpeningFrame = null;
        }
    }
    
    private void alphaJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alphaJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_alphaJTextFieldActionPerformed

    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
        //Credit to: http://stackoverflow.com/questions/1234912/how-to-programmatically-close-a-jframe
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_quitMenuItemActionPerformed
    
    /**
     * Calls dispose() on any JFrame it is passed.
     * @param tempFrame Any JFrame
     */
    public void closeFrame(JFrame tempFrame){
        tempFrame.dispose();
    }
    
    /**
     * Creates new reward and Q matrices with the list of states this method is passed.
     * @param statesList    A list of states in the order they should appear in the domain matrices.
     */
    public void createMatrices(ArrayList<String> statesList){
        int s = statesList.size();
        String[] states = new String[s];
        for(int i=0 ; i<s ; i++){
            states[i] = statesList.get(i);
            //TEST
            //System.out.println(states[i] + " THESE ARE THE DROIDS YOU'RE LOOKING FOR - " + i);
        }
        
        
        if(tempLabelFrame!=null){
            closeFrame(tempLabelFrame);
            tempLabelFrame = null;
        }
        setRunningJLabel("");
        resetMatrices(states);
    }
    
    /**
     * Resets the matrices with the list of states passed. 
     * Resets the states used by R and Q matrices, resets JTable size and cell size preferences, and adds component resize listeners to JScrollPanes.
     * @param states    List of states with which to reset the matrices.
     * @return b        Indicates whether matrices are the correct size.
     */
    private boolean resetMatrices(/*JTable qMatrix, JTable rMatrix,*/ String[] states){
        int c = 0;
        int r = 0;
        boolean b = false;
        //creates String[] beginning with null value followed by states input to the method.
        int l = states.length;
        String [] statesList = new String[l+1];
        statesList[0] = "";
        for(int i=1 ; i<=l ; i++){
            statesList[i] = states[i-1];
        }
        //populates the Q matrix with zeros and row headers.
        String[][] qmatrix = new String[l][l+1];
        for(int i=0 ; i<l ; i++){
            for(int j=0 ; j<=l ; j++){
                if(j==0){
                    qmatrix[i][0] = states[i];
                    r++;
                } else {
                    qmatrix[i][j] = "0";
                    c++;
                } 
            }
        }
        //populates R matrix w/ row headers only
        String[][] rmatrix = new String[l][l+1];
        for(int i=0 ; i<l ; i++){
            for(int j=0 ; j<=l ; j++){
                if(j==0){
                    rmatrix[i][0] = states[i];
                    r++;
                } else {
                    rmatrix[i][j] = "";
                    c++;
                } 
            }
        }
        Matrix qModel = new Matrix(qmatrix, statesList);
        Matrix rModel = new Matrix(rmatrix, statesList);
        qMatrix.setModel(qModel);
        rMatrix.setModel(rModel);
        rMatrix.setPreferredScrollableViewportSize(new Dimension(400,400));
        qMatrix.setPreferredScrollableViewportSize(new Dimension(400,400));
        
        //When first creating the matrices evaluate whether either should use AUTO_RESIZE.
        if (qMatrix.getPreferredSize().width < qMatrix.getParent().getWidth()) {
                    qMatrix.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
                } else {
                    qMatrix.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                }
        if (rMatrix.getPreferredSize().width < rMatrix.getParent().getWidth()) {
                    rMatrix.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
                } else {
                    rMatrix.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                }
        
        for(int y=0 ; y<=l ; y++){
                rMatrix.getColumnModel().getColumn(y).setMinWidth(45);
                rMatrix.getColumnModel().getColumn(y).setPreferredWidth(45);
                qMatrix.getColumnModel().getColumn(y).setMinWidth(45);
                qMatrix.getColumnModel().getColumn(y).setPreferredWidth(45);
        }
        
        stateSpace = states;
        //TEST - if b is true the matrices are the correct size
        //System.out.println("Matrices reset");
        if((c/l)==r){
            b=true;
        }
        return b;
    }
    
    private void resetQMatrix(){
        data.resetData();
        String[] states = stateSpace;
        int l = states.length;
        TableModel tm = qMatrix.getModel();
        for(int i=0 ; i<l ; i++){
            for(int j=0 ; j<=l ; j++){
                if(j==0){
                    tm.setValueAt(states[i], i, 0);
                } else {
                    tm.setValueAt("0", i, j);
                } 
            }
        }
        qMatrix.repaint();
    }
    
    /**
     * Set the runningJLabel.
     * This is used to indicate the state of the experiment when it has completed execution.
     * Pass "Completed" for a terminated experiment, and "" for an experiment being executed.
     * @param label The text to set the JLabel to.
     */
    public void setRunningJLabel(String label){
        runningJLabel.setText(label);
    }
    
    private void setSAExperimentMatrices(){
        resetQMatrix();
        TableModel model = rMatrix.getModel();
        model.setValueAt("0", 0, 1);
        model.setValueAt("0", 1, 1);
        model.setValueAt("0", 5, 1);
        model.setValueAt("0", 0, 2);
        model.setValueAt("0", 1, 2);
        model.setValueAt("0", 2, 2);
        model.setValueAt("0", 6, 2);
        model.setValueAt("0", 1, 3);
        model.setValueAt("0", 2, 3);
        model.setValueAt("0", 3, 3);
        model.setValueAt("0", 7, 3);
        model.setValueAt("0", 2, 4);
        model.setValueAt("0", 3, 4);
        model.setValueAt("0", 4, 4);
        model.setValueAt("0", 8, 4);
        model.setValueAt("0", 3, 5);
        model.setValueAt("0", 4, 5);
        model.setValueAt("0", 9, 5);
        model.setValueAt("0", 0, 6);
        model.setValueAt("0", 5, 6);
        model.setValueAt("0", 6, 6);
        model.setValueAt("0", 10, 6);
        model.setValueAt("-100", 1, 7);
        model.setValueAt("-100", 5, 7);
        model.setValueAt("-100", 6, 7);
        model.setValueAt("-100", 7, 7);
        model.setValueAt("-100", 11, 7);
        model.setValueAt("0", 2, 8);
        model.setValueAt("0", 6, 8);
        model.setValueAt("0", 7, 8);
        model.setValueAt("0", 8, 8);
        model.setValueAt("0", 12, 8);
        model.setValueAt("-100", 7, 9);
        model.setValueAt("-100", 8, 9);
        model.setValueAt("-100", 9, 9);
        model.setValueAt("-100", 3, 9);
        model.setValueAt("-100", 13, 9);
        model.setValueAt("0", 4, 10);
        model.setValueAt("0", 8, 10);
        model.setValueAt("0", 9, 10);
        model.setValueAt("0", 14, 10);
        model.setValueAt("-100", 5, 11);
        model.setValueAt("-100", 10, 11);
        model.setValueAt("-100", 11, 11);
        model.setValueAt("-100", 15, 11);
        model.setValueAt("0", 6, 12);
        model.setValueAt("0", 10, 12);
        model.setValueAt("0", 11, 12);
        model.setValueAt("0", 12, 12);
        model.setValueAt("0", 16, 12);
        model.setValueAt("0", 7, 13);
        model.setValueAt("0", 11, 13);
        model.setValueAt("0", 12, 13);
        model.setValueAt("0", 13, 13);
        model.setValueAt("0", 17, 13);
        model.setValueAt("0", 8, 14);
        model.setValueAt("0", 12, 14);
        model.setValueAt("0", 13, 14);
        model.setValueAt("0", 14, 14);
        model.setValueAt("0", 18, 14);
        model.setValueAt("0", 9, 15);
        model.setValueAt("0", 13, 15);
        model.setValueAt("0", 14, 15);
        model.setValueAt("0", 19, 15);
        model.setValueAt("0", 10, 16);
        model.setValueAt("0", 15, 16);
        model.setValueAt("0", 16, 16);
        model.setValueAt("0", 20, 16);
        
        model.setValueAt("0", 11, 17);
        model.setValueAt("0", 15, 17);
        model.setValueAt("0", 16, 17);
        model.setValueAt("0", 17, 17);
        model.setValueAt("0", 21, 17);
        model.setValueAt("-100", 12, 18);
        model.setValueAt("-100", 16, 18);
        model.setValueAt("-100", 17, 18);
        model.setValueAt("-100", 18, 18);
        model.setValueAt("-100", 22, 18);
        model.setValueAt("0", 13, 19);
        model.setValueAt("0", 17, 19);
        model.setValueAt("0", 18, 19);
        model.setValueAt("0", 19, 19);
        model.setValueAt("0", 23, 19);
        model.setValueAt("-100", 14, 20);
        model.setValueAt("-100", 18, 20);
        model.setValueAt("-100", 19, 20);
        model.setValueAt("-100", 24, 20);
        model.setValueAt("0", 15, 21);
        model.setValueAt("0", 20, 21);
        model.setValueAt("0", 21, 21);
        model.setValueAt("0", 16, 22);
        model.setValueAt("0", 20, 22);
        model.setValueAt("0", 21, 22);
        model.setValueAt("0", 22, 22);
        model.setValueAt("0", 17, 23);
        model.setValueAt("0", 21, 23);
        model.setValueAt("0", 22, 23);
        model.setValueAt("0", 23, 23);
        model.setValueAt("0", 18, 24);
        model.setValueAt("0", 22, 24);
        model.setValueAt("0", 23, 24);
        model.setValueAt("0", 24, 24);
        model.setValueAt("100", 19, 25);
        model.setValueAt("100", 23, 25);
        model.setValueAt("100", 24, 25);
        /*model.setValueAt("0", 0, 1);
        model.setValueAt("0", 1, 1);
        model.setValueAt("0", 5, 1);
        model.setValueAt("0", 0, 2);
        model.setValueAt("0", 1, 2);
        model.setValueAt("0", 2, 2);
        model.setValueAt("0", 6, 2);
        model.setValueAt("0", 1, 3);
        model.setValueAt("0", 2, 3);
        model.setValueAt("0", 3, 3);
        model.setValueAt("0", 7, 3);
        model.setValueAt("0", 2, 4);
        model.setValueAt("0", 3, 4);
        model.setValueAt("0", 4, 4);
        model.setValueAt("0", 8, 4);
        model.setValueAt("0", 3, 5);
        model.setValueAt("0", 4, 5);
        model.setValueAt("0", 9, 5);
        model.setValueAt("0", 0, 6);
        model.setValueAt("0", 5, 6);
        model.setValueAt("0", 6, 6);
        model.setValueAt("-50", 1, 7);
        model.setValueAt("-50", 5, 7);
        model.setValueAt("-50", 6, 7);
        model.setValueAt("-50", 7, 7);
        model.setValueAt("-50", 10, 7);
        model.setValueAt("0", 2, 8);
        model.setValueAt("0", 6, 8);
        model.setValueAt("0", 7, 8);
        model.setValueAt("0", 8, 8);
        model.setValueAt("0", 11, 8);
        model.setValueAt("0", 3, 9);
        model.setValueAt("0", 7, 9);
        model.setValueAt("0", 8, 9);
        model.setValueAt("0", 9, 9);
        model.setValueAt("0", 12, 9);
        model.setValueAt("0", 4, 10);
        model.setValueAt("0", 8, 10);
        model.setValueAt("0", 9, 10);
        model.setValueAt("0", 13, 10);
        model.setValueAt("0", 6, 11);
        model.setValueAt("0", 10, 11);
        model.setValueAt("0", 11, 11);
        model.setValueAt("0", 15, 11);
        model.setValueAt("0", 7, 12);
        model.setValueAt("0", 10, 12);
        model.setValueAt("0", 11, 12);
        model.setValueAt("0", 12, 12);
        model.setValueAt("0", 16, 12);
        model.setValueAt("0", 8, 13);
        model.setValueAt("0", 11, 13);
        model.setValueAt("0", 12, 13);
        model.setValueAt("0", 13, 13);
        model.setValueAt("0", 9, 14);
        model.setValueAt("0", 12, 14);
        model.setValueAt("0", 13, 14);
        model.setValueAt("0", 14, 15);
        model.setValueAt("0", 15, 15);
        model.setValueAt("0", 17, 15);
        model.setValueAt("0", 10, 16);
        model.setValueAt("0", 14, 16);
        model.setValueAt("0", 15, 16);
        model.setValueAt("0", 16, 16);
        model.setValueAt("0", 18, 16);
        model.setValueAt("-100", 11, 17);
        model.setValueAt("-100", 15, 17);
        model.setValueAt("-100", 16, 17);
        model.setValueAt("-100", 19, 17);
        model.setValueAt("0", 14, 18);
        model.setValueAt("0", 17, 18);
        model.setValueAt("0", 18, 18);
        model.setValueAt("0", 15, 19);
        model.setValueAt("0", 17, 19);
        model.setValueAt("0", 18, 19);
        model.setValueAt("0", 19, 19);
        model.setValueAt("0", 16, 20);
        model.setValueAt("0", 18, 20);
        model.setValueAt("0", 19, 20);
        model.setValueAt("0", 20, 20);
        model.setValueAt("0", 19, 21);
        model.setValueAt("0", 20, 21);
        model.setValueAt("0", 21, 21);
        model.setValueAt("100", 20, 22);
        model.setValueAt("100", 21, 22);
        */
        rMatrix.repaint();
    }
    /**
     * Creates a new thread, to which an instance of MainFrame is passed, and on which start() is then called.
     * @param args  the command line arguments. Not used in V1.0
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        Thread RLSim = new Thread(new MainFrame());
        RLSim.start();
    }
    
    /**
     * Calls setVisible(true) on the instance of MainFrame.
     */
    @Override
    public void run() {
        this.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox algorithmComboBox;
    private javax.swing.JTextField alphaJTextField;
    private javax.swing.JTextField episodesJTextField;
    private javax.swing.JTextField epsilonJTextField;
    private javax.swing.JMenuItem exportMatricesMenuItem;
    private javax.swing.JMenuItem exportMenuItem;
    private javax.swing.JTextField gammaJTextField;
    private javax.swing.JTextField goalStateJTextField;
    private javax.swing.JTextField initialStateJTextField;
    private javax.swing.JTextField initialTempJTextField;
    private javax.swing.JButton interruptButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton newMatrixButton;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JComboBox policyComboBox;
    private javax.swing.JTable qMatrix;
    private javax.swing.JScrollPane qMatrixScrollPane;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JTable rMatrix;
    private javax.swing.JScrollPane rMatrixScrollPane;
    private javax.swing.JButton resetExperimentButton;
    private javax.swing.JButton runButton;
    private javax.swing.JLabel runningJLabel;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JTextField temperatureRateJTextField;
    // End of variables declaration//GEN-END:variables
}
