/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Dimension;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.WindowConstants;
import javax.swing.table.TableModel;
import learning.EpsilonGreedy;
import learning.ExperimentData;
import learning.Learner;
import learning.Matrix;
import learning.Policy;
import learning.QLearner;
import learning.SARSA;
import learning.Softmax;

/** 
 *
 * @author alessandrobisiani
 */
public class MainFrame extends javax.swing.JFrame {

    private JFrame tempLabelFrame;
    private JFrame tempSavingFrame;
    private JFrame tempExportFrame;
    private JFrame tempOpeningFrame;
    private String[] stateSpace = {"state1","state2","state3","state4","state5"};
    private Learner learner;
    private Thread learningThread;
    public ExperimentData data;
    //private String[] POLICIES = {"É›-Greedy","Softmax"};
    //private String[] LEARNING_ALGORITHMS;
    
    
    
    public MainFrame() {
        initComponents();
        learner = null;
        data = new ExperimentData(stateSpace.length, 0);
        //learningThread = new Thread();
        
        tempLabelFrame  = new JFrame();
        tempSavingFrame = new JFrame();
        tempExportFrame = new JFrame();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jMenuItem1 = new javax.swing.JMenuItem();
        qMatrixScrollPane = new javax.swing.JScrollPane();
        qMatrix = new javax.swing.JTable();
        rMatrixScrollPane = new javax.swing.JScrollPane();
        rMatrix = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        matrixSizeTextField = new javax.swing.JTextField();
        episodesJTextField = new javax.swing.JTextField();
        gammaJTextField = new javax.swing.JTextField();
        alphaJTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        algorithmComboBox = new javax.swing.JComboBox();
        interruptButton = new javax.swing.JButton();
        newMatrixButton = new javax.swing.JButton();
        epsilonJTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        runButton = new javax.swing.JButton();
        resetExperimentButton = new javax.swing.JButton();
        goalStateJTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        initialStateJTextField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        policyComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        temperatureRateJTextField = new javax.swing.JTextField();
        runningJLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        exportMenuItem = new javax.swing.JMenuItem();
        exportMatricesMenuItem = new javax.swing.JMenuItem();
        quitMenuItem = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        qMatrixScrollPane.setBorder(null);

        qMatrix.setModel(new Matrix(new String[][] {{"state1","0","0","0","0","0"},
            {"state2","0","0","0","0","0"},
            {"state3","0","0","0","0","0"},
            {"state4","0","0","0","0","0"},
            {"state5","0","0","0","0","0"}},
        new String[] {"","state1","state2","state3","state4",
            "state5"})
    );
    qMatrix.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
    qMatrix.setColumnSelectionAllowed(true);
    qMatrixScrollPane.setViewportView(qMatrix);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 9;
    gridBagConstraints.gridy = 32;
    gridBagConstraints.gridwidth = 15;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 506;
    gridBagConstraints.ipady = 341;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(6, 18, 8, 6);
    getContentPane().add(qMatrixScrollPane, gridBagConstraints);

    rMatrixScrollPane.setBorder(null);

    rMatrix.setModel(new Matrix(new String[][] {{"state1","","","","",""},
        {"state2","","","","",""},
        {"state3","","","","",""},
        {"state4","","","","",""},
        {"state5","","","","",""}},
    new String[] {"","state1","state2","state3","state4",
        "state5"}));
/*
rMatrix.setModel(new javax.swing.table.DefaultTableModel(

new Object[][]     {{0,0,0,0},
    {0,0,0,0},
    {0,0,0,0},
    {0,0,0,0}},

    new String[] {"1","2","3","4"}

    ));
    */
    rMatrix.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
    rMatrix.setColumnSelectionAllowed(true);
    rMatrixScrollPane.setViewportView(rMatrix);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 32;
    gridBagConstraints.gridwidth = 9;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 519;
    gridBagConstraints.ipady = 341;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(6, 8, 8, 0);
    getContentPane().add(rMatrixScrollPane, gridBagConstraints);

    jLabel1.setText("Reward Matrix");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 31;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(12, 8, 0, 0);
    getContentPane().add(jLabel1, gridBagConstraints);

    jLabel2.setText("Q Matrix");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 9;
    gridBagConstraints.gridy = 31;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(12, 18, 0, 0);
    getContentPane().add(jLabel2, gridBagConstraints);

    jLabel4.setText("Episodes");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(18, 10, 0, 0);
    getContentPane().add(jLabel4, gridBagConstraints);

    jLabel5.setText("Learning Rate");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 8;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.gridheight = 14;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 92, 0, 0);
    getContentPane().add(jLabel5, gridBagConstraints);

    jLabel6.setText("Discount Factor");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(18, 77, 0, 0);
    getContentPane().add(jLabel6, gridBagConstraints);

    jLabel7.setText("Policy");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 8;
    gridBagConstraints.gridheight = 14;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 29, 0, 0);
    getContentPane().add(jLabel7, gridBagConstraints);

    jLabel8.setText("Algorithm");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 9;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(16, 44, 0, 0);
    getContentPane().add(jLabel8, gridBagConstraints);

    matrixSizeTextField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            matrixSizeTextFieldActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 19;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridheight = 5;
    gridBagConstraints.ipadx = 40;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(25, 16, 0, 0);
    getContentPane().add(matrixSizeTextField, gridBagConstraints);

    episodesJTextField.setText("10");
    episodesJTextField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            episodesJTextFieldActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 4;
    gridBagConstraints.gridheight = 4;
    gridBagConstraints.ipadx = 99;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(12, 6, 0, 0);
    getContentPane().add(episodesJTextField, gridBagConstraints);

    gammaJTextField.setText("0.6");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 7;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridheight = 4;
    gridBagConstraints.ipadx = 91;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(12, 6, 0, 0);
    getContentPane().add(gammaJTextField, gridBagConstraints);

    alphaJTextField.setText("0.2");
    alphaJTextField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            alphaJTextFieldActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 7;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.gridheight = 20;
    gridBagConstraints.ipadx = 91;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(7, 6, 0, 0);
    getContentPane().add(alphaJTextField, gridBagConstraints);

    jButton1.setText("Update");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 20;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.gridheight = 9;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(26, 6, 0, 0);
    getContentPane().add(jButton1, gridBagConstraints);

    algorithmComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Q-Learning", "SARSA"}));
    algorithmComboBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            algorithmComboBoxActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 11;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 4;
    gridBagConstraints.gridheight = 3;
    gridBagConstraints.ipadx = 52;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(12, 12, 0, 0);
    getContentPane().add(algorithmComboBox, gridBagConstraints);

    interruptButton.setText("Interrupt");
    interruptButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            interruptButtonActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 9;
    gridBagConstraints.gridy = 29;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(22, 36, 0, 0);
    getContentPane().add(interruptButton, gridBagConstraints);

    newMatrixButton.setText("New Matrix");
    newMatrixButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            newMatrixButtonActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 29;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(22, 6, 0, 0);
    getContentPane().add(newMatrixButton, gridBagConstraints);

    epsilonJTextField.setText("0.35");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 25;
    gridBagConstraints.gridwidth = 4;
    gridBagConstraints.gridheight = 4;
    gridBagConstraints.ipadx = 99;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(5, 6, 0, 0);
    getContentPane().add(epsilonJTextField, gridBagConstraints);

    jLabel10.setText("Epsilon");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 25;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(11, 20, 0, 0);
    getContentPane().add(jLabel10, gridBagConstraints);

    runButton.setText("Run");
    runButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            runButtonActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 14;
    gridBagConstraints.gridy = 29;
    gridBagConstraints.gridwidth = 5;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.ipadx = 22;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(22, 18, 0, 0);
    getContentPane().add(runButton, gridBagConstraints);

    resetExperimentButton.setText("Reset Experiment");
    resetExperimentButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            resetExperimentButtonActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 29;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(22, 20, 0, 0);
    getContentPane().add(resetExperimentButton, gridBagConstraints);

    goalStateJTextField.setText("state5");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 11;
    gridBagConstraints.gridy = 25;
    gridBagConstraints.gridwidth = 4;
    gridBagConstraints.gridheight = 3;
    gridBagConstraints.ipadx = 90;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(1, 12, 0, 0);
    getContentPane().add(goalStateJTextField, gridBagConstraints);

    jLabel12.setText("Goal State");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 9;
    gridBagConstraints.gridy = 25;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(7, 44, 0, 0);
    getContentPane().add(jLabel12, gridBagConstraints);

    initialStateJTextField.setText("state1");
    initialStateJTextField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            initialStateJTextFieldActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 11;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.gridwidth = 4;
    gridBagConstraints.gridheight = 19;
    gridBagConstraints.ipadx = 90;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(5, 12, 0, 0);
    getContentPane().add(initialStateJTextField, gridBagConstraints);

    jLabel13.setText("Initial State");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 9;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.gridheight = 13;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(11, 36, 0, 0);
    getContentPane().add(jLabel13, gridBagConstraints);

    policyComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "É›-Greedy", "Softmax" }));
    policyComboBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            policyComboBoxActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.gridwidth = 4;
    gridBagConstraints.gridheight = 21;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(9, 6, 0, 0);
    getContentPane().add(policyComboBox, gridBagConstraints);

    jLabel3.setText("Temperature Decrease Rate");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 25;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(11, 6, 0, 0);
    getContentPane().add(jLabel3, gridBagConstraints);

    temperatureRateJTextField.setText("0.005");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 7;
    gridBagConstraints.gridy = 25;
    gridBagConstraints.gridheight = 4;
    gridBagConstraints.ipadx = 91;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(5, 6, 0, 0);
    getContentPane().add(temperatureRateJTextField, gridBagConstraints);

    runningJLabel.setText(" ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 19;
    gridBagConstraints.gridy = 29;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.ipadx = 129;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(27, 18, 0, 0);
    getContentPane().add(runningJLabel, gridBagConstraints);

    jMenu1.setText("File");

    openMenuItem.setText("Open");
    openMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            openMenuItemActionPerformed(evt);
        }
    });
    jMenu1.add(openMenuItem);

    saveMenuItem.setText("Save");
    saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            saveMenuItemActionPerformed(evt);
        }
    });
    jMenu1.add(saveMenuItem);

    exportMenuItem.setText("Export");
    exportMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            exportMenuItemActionPerformed(evt);
        }
    });
    jMenu1.add(exportMenuItem);

    exportMatricesMenuItem.setText("Export As Matrices");
    exportMatricesMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            exportMatricesMenuItemActionPerformed(evt);
        }
    });
    jMenu1.add(exportMatricesMenuItem);

    quitMenuItem.setText("Quit");
    jMenu1.add(quitMenuItem);

    jMenuBar1.add(jMenu1);

    setJMenuBar(jMenuBar1);

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void algorithmComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algorithmComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_algorithmComboBoxActionPerformed

    private void interruptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interruptButtonActionPerformed
        
        learningThread.interrupt();
        setRunningJLabel("");
        //System.out.println(new QLearner(rMatrix,qMatrix,1,this).getClass().getName());
        /*
        if(tempLabelFrame != null){
           System.out.println("still ref");
        } else {
           System.out.println("nothing to see here");
        }
        
            File f = new File(".");
            System.out.println(f.getAbsolutePath());
        
            qLearner.setTDThreshold(Double.parseDouble(tdThresholdJTextField.getText()));
            qLearner.setPolicy(new EpsilonGreedy(qLearner,Double.parseDouble(epsilonJTextField.getText())));
            qLearner.setAlpha(Double.parseDouble(alphaJTextField.getText()));
            qLearner.setGamma(Double.parseDouble(gammaJTextField.getText()));
            int ep = Integer.parseInt(episodesJTextField.getText());
            for(int i=0;i<ep;i++){
            resetQMatrix();
            qLearner.episode();
            }
            
            System.out.println(rMatrix.getModel().getValueAt(0,0));
            System.out.println(rMatrix.getModel().getValueAt(1,1));
            System.out.println(rMatrix.getModel().getValueAt(2,2));
            Object o = rMatrix.getModel().getValueAt(2,2);
            String s = "";
            int i = 0;
            if(o instanceof Integer){
            i = (Integer)rMatrix.getModel().getValueAt(2,2) + (Integer)rMatrix.getModel().getValueAt(2,2);
            System.out.println(i);
            } else if(o instanceof String){
            s = (String)rMatrix.getModel().getValueAt(2,2) + (String)rMatrix.getModel().getValueAt(2,2);
            System.out.println(s);
            }
            System.out.println(o.getClass());
            */
            
            //rMatrix.setModel(new DefaultTableModel(new Object[][] {{1,2,3},{4,5,6}}, new String[] {"s1","s2","s3"}));
            //System.out.println(qMatrix.getValueAt(0,0));        //Test of whether getValueAt() returns the value displayed by the table which may be arbitrarily modified.
            //System.out.println(qMatrix.getModel().getValueAt(0,0));//Test that the TableModel assoc with the JTable is updated alongside the graphical representation.
            //rMatrix.setModel(new RMatrix());
        
    }//GEN-LAST:event_interruptButtonActionPerformed

    private void episodesJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_episodesJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_episodesJTextFieldActionPerformed

    private void matrixSizeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matrixSizeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_matrixSizeTextFieldActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String text = matrixSizeTextField.getText();
        int mSize = Integer.parseInt(text);
        if(mSize <= 10 && mSize > 1){
            System.out.println(mSize);
        } else {
            final JOptionPane warning = new JOptionPane();
            warning.showMessageDialog(this, "Specify a number between 2 and 10 inclusive");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void newMatrixButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMatrixButtonActionPerformed
        if(tempLabelFrame != null && tempLabelFrame.isVisible()){
            //do nothing
        } else if (tempLabelFrame != null && !tempLabelFrame.isVisible()){
            createStateSpaceFrame();
        } else {
            createStateSpaceFrame();
        }
    }//GEN-LAST:event_newMatrixButtonActionPerformed

    private void createStateSpaceFrame(){
        tempLabelFrame = new JFrame("State Space");
        tempLabelFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        tempLabelFrame.getContentPane().add(new StateSpacePanel(this));
        tempLabelFrame.pack();
        tempLabelFrame.setVisible(true);
    }
    
    private String getPolicy(){
        return (String) policyComboBox.getSelectedItem();
    }
    
    private String getAlgorithm(){
        return (String) algorithmComboBox.getSelectedItem();
    }
    
    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        //create a fresh learner with ref to the JTables and the experiment size
        //Thread check taken from stack overflow user Joachim Sauer
        //System.out.println(learningThread.getState().toString());
        System.out.println("Find This Shit");
        if(/*(learningThread.getState()!=Thread.State.TERMINATED && learningThread.getState()!=Thread.State.NEW) ||*/ Integer.parseInt(episodesJTextField.getText()) > 5000){
            return;
        }
        setRunningJLabel("");
        switch (getAlgorithm()){
            case "Q-Learning":  QLearner qL =new QLearner(qMatrix, rMatrix,Integer.parseInt(episodesJTextField.getText()),this);
                                qL.setAlpha(Double.parseDouble(alphaJTextField.getText()));
                                qL.setGamma(Double.parseDouble(gammaJTextField.getText()));
                                data.setAlpha(Double.parseDouble(alphaJTextField.getText()));
                                data.setGamma(Double.parseDouble(gammaJTextField.getText()));
                                learner = qL;
                                break;
            case "SARSA":       SARSA sa = new SARSA(qMatrix, rMatrix,Integer.parseInt(episodesJTextField.getText()),this);
                                sa.setAlpha(Double.parseDouble(alphaJTextField.getText()));
                                sa.setGamma(Double.parseDouble(gammaJTextField.getText()));
                                data.setAlpha(Double.parseDouble(alphaJTextField.getText()));
                                data.setGamma(Double.parseDouble(gammaJTextField.getText()));
                                learner = sa;
                                break;
        }
        switch(getPolicy()){
            case "É›-Greedy":    Policy eG = new EpsilonGreedy(Double.parseDouble(epsilonJTextField.getText()));
                                learner.setPolicy(eG); 
                                data.setPolicy(getPolicy());
                                data.setEpsilon(Double.parseDouble(epsilonJTextField.getText()));
                                break;
            case "Softmax":     Policy sM = new Softmax(Double.parseDouble(temperatureRateJTextField.getText()));
                                System.out.println("Sbarz " + Double.parseDouble(temperatureRateJTextField.getText()));
                                System.out.println("Sbarz " + data.getStepsXEpisode());
                                System.out.println("Sbarz " + data.getStepsXEpisode().size()+1);
                                learner.setPolicy(sM);
                                data.setTemperatureRate(Double.parseDouble(temperatureRateJTextField.getText()));
                                data.setPolicy(getPolicy());
                                break;
        }
        //data.setRModel((Matrix)rMatrix.getModel());
        data.setAlgorithm(getAlgorithm());
        learner.setGoalState(goalStateJTextField.getText());
        learner.setInitialState(initialStateJTextField.getText());
        data.setGoalState(goalStateJTextField.getText());
        data.setInitialState(initialStateJTextField.getText());
        
        learningThread = new Thread(learner);
        learningThread.start();
    }//GEN-LAST:event_runButtonActionPerformed

    private void resetExperimentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetExperimentButtonActionPerformed
        episodesJTextField.setText("10");
        gammaJTextField.setText("0.6");
        alphaJTextField.setText("0.2");
        epsilonJTextField.setText("0.35");
        goalStateJTextField.setText("25");
        initialStateJTextField.setText("1");
        temperatureRateJTextField.setText("0.005");
        setSAExperimentMatrices();
        
    }//GEN-LAST:event_resetExperimentButtonActionPerformed

    private void initialStateJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initialStateJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_initialStateJTextFieldActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        if(tempSavingFrame != null && tempSavingFrame.isVisible()){
            //do nothing
        } else if (tempSavingFrame != null && !tempSavingFrame.isVisible()){
            createSavingFrame();
        } else {
            createSavingFrame();
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed
    private void createSavingFrame(){
        tempSavingFrame = new JFrame("Save File");
        tempSavingFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        tempSavingFrame.getContentPane().add(new SavingPanel(this));
        tempSavingFrame.pack();
        tempSavingFrame.setVisible(true);
    }
    //Writes the ExperimentData associated with MainFrame, the states String[], and the reward matrix data String[][].
    protected void saveExperiment(String uri){
        //FileOutputStream out = null;
        //FileInputStream in = null;
        try {
            FileOutputStream out = new FileOutputStream(uri);
            try (ObjectOutputStream objectOut = new ObjectOutputStream(out)) {
                //data.setPolicy(null);
                objectOut.writeObject(data);
                Matrix model = (Matrix) rMatrix.getModel();
                //states includes the empty first column. Save the array without that column.
                String[] tempStates = model.getStates();
                String[] states = new String[model.getStates().length-1];
                for(int i=0;i<states.length;i++){
                    states[i] = tempStates[i+1];
                }
                String[][] rewardData = model.getData();
                objectOut.writeObject(states);
                objectOut.writeObject(rewardData);
                objectOut.flush();
                objectOut.close();
                
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("FileNotFoundException");
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("IOException");
        } finally {
            closeFrame(tempSavingFrame);
            tempSavingFrame = null;
        }
    }
    
    private void policyComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_policyComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_policyComboBoxActionPerformed

    private void exportMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportMenuItemActionPerformed
        if(tempExportFrame != null && tempExportFrame.isVisible()){
            //do nothing
        } else if (tempExportFrame != null && !tempExportFrame.isVisible()){
            createExportFrame();
        } else {
            createExportFrame();
        }
    }//GEN-LAST:event_exportMenuItemActionPerformed
    private void createExportFrame(){
        tempExportFrame = new JFrame("Export");
        tempExportFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        tempExportFrame.getContentPane().add(new ExportPanel(this));
        tempExportFrame.pack();
        tempExportFrame.setVisible(true);
    }
    //Exports all q value data to a .csv file
    //episode data is added to the same line. New line after every episode data is written
    protected void exportData(String uri){
        ArrayList<double[]> expData = data.getQValuesPerEpisode();
        FileWriter writer = null;
        try {
            writer = new FileWriter(uri+".csv");
            try (BufferedWriter br = new BufferedWriter(writer)) {
                
                StringBuilder sb = new StringBuilder();
                int matrixSize = expData.get(0).length;
                String nl = System.getProperty("line.separator");
                //add experiment parameters
                sb.append("Algorithm : ");      sb.append(getAlgorithm()); sb.append(","+nl);
                sb.append("Policy : ");         sb.append(data.getPolicy().getClass());  sb.append(","+nl);
                switch(getPolicy()){
                    case "É›-Greedy":    sb.append("Gamma : "); sb.append(data.getGamma()); sb.append(","+nl);
                                        break;
                    case "Softmax":     sb.append("Temperature Decrease Rate: "); sb.append(data.getTemperatureRate()); sb.append(","+nl);
                                        break;
                }
                sb.append("Alpha : ");          sb.append(data.getAlpha());              sb.append(","+nl);
                sb.append("Initial State : ");  sb.append(data.getInitialState());       sb.append(","+nl);
                sb.append("Goal State : ");     sb.append(data.getGoalState());          sb.append(","+nl);
                
                sb.append("States:,");
                for(String state : stateSpace){
                    sb.append(state); sb.append(",");
                }
                sb.append(nl+nl);
                
                sb.append("Episode #," + nl);
                for(int i=0;i<expData.size();i++){
                    sb.append((i+1)+",");
                    double[] ep = expData.get(i);
                    for(int j=0;j<ep.length;j++){
                        sb.append(ep[j]);
                        sb.append(",");
                    }
                    sb.append(nl);
                }
                br.write(sb.toString());
            }
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            if(writer!=null){
                try {
                    writer.close();
                } catch (IOException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            closeFrame(tempExportFrame);
            tempExportFrame = null;
        }
    }
    
    private void exportMatricesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportMatricesMenuItemActionPerformed
        if(tempExportFrame != null && tempExportFrame.isVisible()){
            //do nothing
        } else if (tempExportFrame != null && !tempExportFrame.isVisible()){
            createMatrixExportFrame();
        } else {
            createMatrixExportFrame();
        }
    }//GEN-LAST:event_exportMatricesMenuItemActionPerformed
    private void createMatrixExportFrame(){
        tempExportFrame = new JFrame("Export As Matrices");
        tempExportFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        tempExportFrame.getContentPane().add(new ExportPanel(this));
        tempExportFrame.pack();
        tempExportFrame.setVisible(true);
    }
    protected void exportDataAsMatrices(String uri){
        ArrayList<double[][]> expData = data.getAllData();
        FileWriter writer = null;
        try {
            writer = new FileWriter(uri+".csv");
            try (BufferedWriter br = new BufferedWriter(writer)) {
                
                StringBuilder sb = new StringBuilder();
                int matrixSize = expData.get(0).length;
                String nl = System.getProperty("line.separator");
                //add experiment parameters
                sb.append("Algorithm : ");      sb.append(data.getAlgorithm()); sb.append(","+nl);
                sb.append("Policy : ");         sb.append(data.getPolicy().getClass());  sb.append(","+nl);
                switch(getPolicy()){
                    case "É›-Greedy":    sb.append("Gamma : "); sb.append(data.getGamma()); sb.append(","+nl);
                                        break;
                    case "Softmax":     sb.append("Temperature Decrease Rate: "); sb.append(data.getTemperatureRate()); sb.append(","+nl);
                                        break;
                }
                sb.append("Alpha : ");          sb.append(data.getAlpha());              sb.append(","+nl);
                sb.append("Initial State : ");  sb.append(data.getInitialState());       sb.append(","+nl);
                sb.append("Goal State : ");     sb.append(data.getGoalState());          sb.append(","+nl); sb.append(nl);
                
                for(int i=0;i<expData.size();i++){
                    sb.append("Episode # "); sb.append(i+1); sb.append(",");
                    for(String state : stateSpace){
                        sb.append(state); sb.append(",");
                    }   sb.append(nl);
                    
                    for(int row=0;row<matrixSize;row++){
                        sb.append(stateSpace[row]); sb.append(",");
                        for(int column=0;column<matrixSize;column++){
                            sb.append(expData.get(i)[row][column]);
                            sb.append(",");
                        }
                        sb.append(nl);
                    }
                    sb.append(nl);
                }
                br.write(sb.toString());
            }
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if(writer!=null){
                try {
                    writer.close();
                } catch (IOException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            closeFrame(tempExportFrame);
            tempExportFrame = null;
        }
    }
    
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        if(tempOpeningFrame != null && tempOpeningFrame.isVisible()){
            //do nothing
        } else if (tempOpeningFrame != null && !tempOpeningFrame.isVisible()){
            createOpeningFrame();
        } else {
            createOpeningFrame();
        }
    }//GEN-LAST:event_openMenuItemActionPerformed
    private void createOpeningFrame(){
        tempOpeningFrame = new JFrame("Open Experiment");
        tempOpeningFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        tempOpeningFrame.getContentPane().add(new OpeningPanel(this));
        tempOpeningFrame.pack();
        tempOpeningFrame.setVisible(true);
    }
    protected void openExperiment(String uri){
        FileInputStream in = null;
        String[] states = null;
        String[][] rewardData = null;
        try {
            //in = new FileInputStream(uri);
            //ObjectInputStream objectIn = new ObjectInputStream(in);
            //BufferedInputStream buffIn = new BufferedInputStream(in);
            in = new FileInputStream(uri);
            ObjectInputStream objectIn = new ObjectInputStream(in);
            Object expData = objectIn.readObject();
            Object s = objectIn.readObject();
            Object r = objectIn.readObject();
            
            System.out.println(data.getClass());
            System.out.println(s.getClass());
            System.out.println(r.getClass());
            
            if(expData instanceof ExperimentData){
                System.out.println("Exp Data got");
                ExperimentData savedData = (ExperimentData) expData;
                data = savedData;
            } else {System.out.println("no experiment data"); }
            if(s instanceof String[]){
                states = (String[]) s;
                System.out.println("states got " + states.length);
            } else{ System.out.println("no states list"); }
            if(r instanceof String[][]){
                System.out.println("rewards got");
                rewardData = (String[][]) r;
            } else{System.out.println("no rewards data");}
            
            resetMatrices(qMatrix,rMatrix,states);
            Matrix model = (Matrix) rMatrix.getModel();
            model.setData(rewardData);
            model.setStates(states);
            rMatrix.repaint();
                
            episodesJTextField.setText(String.valueOf(data.getStepsXEpisode().size()));
            policyComboBox.setSelectedItem(data.getPolicy());
            algorithmComboBox.setSelectedItem(data.getAlgorithm());
            epsilonJTextField.setText(String.valueOf(data.getEpsilon()));
            System.out.println(data.getEpsilon()+" epsilon");
            alphaJTextField.setText(String.valueOf(data.getAlpha()));
            System.out.println(data.getAlpha()+" alpha");
            gammaJTextField.setText(String.valueOf(data.getGamma()));
            System.out.println(data.getGamma()+ " gamma");
            goalStateJTextField.setText(data.getGoalState());
            System.out.println(data.getGoalState()+" goal S");
            initialStateJTextField.setText(data.getInitialState());
            System.out.println(data.getInitialState()+" initial S");
            temperatureRateJTextField.setText(String.valueOf(data.getTemperatureRate()));
            System.out.println(String.valueOf(data.getTemperatureRate()) +" temp");
                
            } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if(in!=null){
                    in.close();
                }
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            closeFrame(tempOpeningFrame);
            tempOpeningFrame = null;
        }
    }
    
    private void alphaJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alphaJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_alphaJTextFieldActionPerformed
    
    public void closeFrame(JFrame tempFrame){
        tempFrame.dispose();
    }
    
    //takes the states input as an ArrayList and calls the R and Q matrix constructors, discarding the old matrices and setting the new ones to be visible.
    public void createMatrices(ArrayList<String> statesList){
        int s = statesList.size();
        String[] states = new String[s];
        for(int i=0 ; i<s ; i++){
            states[i] = statesList.get(i);
            System.out.println(states[i] + " THESE ARE THE DROIDS YOU'RE LOOKING FOR - " + i);
        }
        
        
        if(tempLabelFrame!=null){
            closeFrame(tempLabelFrame);
            tempLabelFrame = null;
        }
        setRunningJLabel("");
        resetMatrices(qMatrix, rMatrix, states);
    }
    
    public boolean resetMatrices(JTable qMatrix, JTable rMatrix, String[] states){
        int c = 0;
        int r = 0;
        boolean b = false;
        //creates String[] beginning with null value followed by states input to the method.
        int l = states.length;
        String [] statesList = new String[l+1];
        statesList[0] = "";
        for(int i=1 ; i<=l ; i++){
            statesList[i] = states[i-1];
        }
        //populates the Q matrix with zeros and row headers.
        String[][] qmatrix = new String[l][l+1];
        for(int i=0 ; i<l ; i++){
            for(int j=0 ; j<=l ; j++){
                if(j==0){
                    qmatrix[i][0] = states[i];
                    r++;
                } else {
                    qmatrix[i][j] = "0";
                    c++;
                } 
            }
        }
        //populates R matrix w/ row headers only
        String[][] rmatrix = new String[l][l+1];
        for(int i=0 ; i<l ; i++){
            for(int j=0 ; j<=l ; j++){
                if(j==0){
                    rmatrix[i][0] = states[i];
                    r++;
                } else {
                    rmatrix[i][j] = "";
                    c++;
                } 
            }
        }
        
        //Create new DefaultTableModel s, set them as models for Q and R matrices and as designated TableModels in qLearner.
        //The purpose of this is to make sure there's a reference to DefaultTableModel objects due to their great methods.
        Matrix qModel = new Matrix(qmatrix, statesList);
        Matrix rModel = new Matrix(rmatrix, statesList);
        qMatrix.setModel(qModel);
        rMatrix.setModel(rModel);
        rMatrix.setPreferredScrollableViewportSize(new Dimension(400,400));
        qMatrix.setPreferredScrollableViewportSize(new Dimension(400,400));
        
        //jScrollPane1.createHorizontalScrollBar();
        //jScrollPane2.createHorizontalScrollBar();
        
        //Resize events trigger an evaluation of whether to use AUTO_RESIZE or not. 
        //The result is he table fills the JScrollPane until it won't fit, then assumes the preferred size and creates a scroll bar.
        rMatrix.getParent().addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(final ComponentEvent e) {
                if (rMatrix.getPreferredSize().width < rMatrix.getParent().getWidth()) {
                    rMatrix.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
                } else {
                    rMatrix.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                }
            }
        });
        qMatrix.getParent().addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(final ComponentEvent e) {
                if (qMatrix.getPreferredSize().width < qMatrix.getParent().getWidth()) {
                    qMatrix.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
                } else {
                    qMatrix.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                }
            }
        });
        
        //When first creating the matrices also evaluate whether either should use AUTO_RESIZE.
        if (qMatrix.getPreferredSize().width < qMatrix.getParent().getWidth()) {
                    qMatrix.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
                } else {
                    qMatrix.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                }
        if (rMatrix.getPreferredSize().width < rMatrix.getParent().getWidth()) {
                    rMatrix.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
                } else {
                    rMatrix.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                }
        
        for(int y=0 ; y<=l ; y++){
                rMatrix.getColumnModel().getColumn(y).setMinWidth(40);
                rMatrix.getColumnModel().getColumn(y).setPreferredWidth(40);
                qMatrix.getColumnModel().getColumn(y).setMinWidth(40);
                qMatrix.getColumnModel().getColumn(y).setPreferredWidth(40);
        }
        
        //qLearner.setModels(qModel, rModel);
        stateSpace = states;
        //qLearner.resetStartingPosition();
        System.out.println("Matrices reset");
        if((c/l)==r){
            b=true;
        }
        return b;
    }
    
    public void resetQMatrix(){
        data.resetData();
        String[] states = stateSpace;
        int l = states.length;
        TableModel tm = qMatrix.getModel();
        //String[][] qmatrix = new String[l][l+1];
        for(int i=0 ; i<l ; i++){
            for(int j=0 ; j<=l ; j++){
                if(j==0){
                    tm.setValueAt(states[i], i, 0);
                } else {
                    tm.setValueAt("0", i, j);
                } 
            }
        }
        qMatrix.repaint();
    }
    
    public void setRunningJLabel(String label){
        runningJLabel.setText(label);
    }
    
    public void setSAExperimentMatrices(){
        resetQMatrix();
        TableModel model = rMatrix.getModel();
        model.setValueAt("0", 0, 1);
        model.setValueAt("0", 1, 1);
        model.setValueAt("0", 5, 1);
        model.setValueAt("0", 0, 2);
        model.setValueAt("0", 1, 2);
        model.setValueAt("0", 2, 2);
        model.setValueAt("0", 6, 2);
        model.setValueAt("0", 1, 3);
        model.setValueAt("0", 2, 3);
        model.setValueAt("0", 3, 3);
        model.setValueAt("0", 7, 3);
        model.setValueAt("0", 2, 4);
        model.setValueAt("0", 3, 4);
        model.setValueAt("0", 4, 4);
        model.setValueAt("0", 8, 4);
        model.setValueAt("0", 3, 5);
        model.setValueAt("0", 4, 5);
        model.setValueAt("0", 9, 5);
        model.setValueAt("0", 0, 6);
        model.setValueAt("0", 5, 6);
        model.setValueAt("0", 6, 6);
        model.setValueAt("0", 10, 6);
        model.setValueAt("-100", 1, 7);
        model.setValueAt("-100", 5, 7);
        model.setValueAt("-100", 6, 7);
        model.setValueAt("-100", 7, 7);
        model.setValueAt("-100", 11, 7);
        model.setValueAt("0", 2, 8);
        model.setValueAt("0", 6, 8);
        model.setValueAt("0", 7, 8);
        model.setValueAt("0", 8, 8);
        model.setValueAt("0", 12, 8);
        model.setValueAt("-100", 7, 9);
        model.setValueAt("-100", 8, 9);
        model.setValueAt("-100", 9, 9);
        model.setValueAt("-100", 3, 9);
        model.setValueAt("-100", 13, 9);
        model.setValueAt("0", 4, 10);
        model.setValueAt("0", 8, 10);
        model.setValueAt("0", 9, 10);
        model.setValueAt("0", 14, 10);
        model.setValueAt("-100", 5, 11);
        model.setValueAt("-100", 10, 11);
        model.setValueAt("-100", 11, 11);
        model.setValueAt("-100", 15, 11);
        model.setValueAt("0", 6, 12);
        model.setValueAt("0", 10, 12);
        model.setValueAt("0", 11, 12);
        model.setValueAt("0", 12, 12);
        model.setValueAt("0", 16, 12);
        model.setValueAt("0", 7, 13);
        model.setValueAt("0", 11, 13);
        model.setValueAt("0", 12, 13);
        model.setValueAt("0", 13, 13);
        model.setValueAt("0", 17, 13);
        model.setValueAt("0", 8, 14);
        model.setValueAt("0", 12, 14);
        model.setValueAt("0", 13, 14);
        model.setValueAt("0", 14, 14);
        model.setValueAt("0", 18, 14);
        model.setValueAt("0", 9, 15);
        model.setValueAt("0", 13, 15);
        model.setValueAt("0", 14, 15);
        model.setValueAt("0", 19, 15);
        model.setValueAt("0", 10, 16);
        model.setValueAt("0", 15, 16);
        model.setValueAt("0", 16, 16);
        model.setValueAt("0", 20, 16);
        
        model.setValueAt("0", 11, 17);
        model.setValueAt("0", 15, 17);
        model.setValueAt("0", 16, 17);
        model.setValueAt("0", 17, 17);
        model.setValueAt("0", 21, 17);
        model.setValueAt("-100", 12, 18);
        model.setValueAt("-100", 16, 18);
        model.setValueAt("-100", 17, 18);
        model.setValueAt("-100", 18, 18);
        model.setValueAt("-100", 22, 18);
        model.setValueAt("0", 13, 19);
        model.setValueAt("0", 17, 19);
        model.setValueAt("0", 18, 19);
        model.setValueAt("0", 19, 19);
        model.setValueAt("0", 23, 19);
        model.setValueAt("-100", 14, 20);
        model.setValueAt("-100", 18, 20);
        model.setValueAt("-100", 19, 20);
        model.setValueAt("-100", 24, 20);
        model.setValueAt("0", 15, 21);
        model.setValueAt("0", 20, 21);
        model.setValueAt("0", 21, 21);
        model.setValueAt("0", 16, 22);
        model.setValueAt("0", 20, 22);
        model.setValueAt("0", 21, 22);
        model.setValueAt("0", 22, 22);
        model.setValueAt("0", 17, 23);
        model.setValueAt("0", 21, 23);
        model.setValueAt("0", 22, 23);
        model.setValueAt("0", 23, 23);
        model.setValueAt("0", 18, 24);
        model.setValueAt("0", 22, 24);
        model.setValueAt("0", 23, 24);
        model.setValueAt("0", 24, 24);
        model.setValueAt("100", 19, 25);
        model.setValueAt("100", 23, 25);
        model.setValueAt("100", 24, 25);
        /*model.setValueAt("0", 0, 1);
        model.setValueAt("0", 1, 1);
        model.setValueAt("0", 5, 1);
        model.setValueAt("0", 0, 2);
        model.setValueAt("0", 1, 2);
        model.setValueAt("0", 2, 2);
        model.setValueAt("0", 6, 2);
        model.setValueAt("0", 1, 3);
        model.setValueAt("0", 2, 3);
        model.setValueAt("0", 3, 3);
        model.setValueAt("0", 7, 3);
        model.setValueAt("0", 2, 4);
        model.setValueAt("0", 3, 4);
        model.setValueAt("0", 4, 4);
        model.setValueAt("0", 8, 4);
        model.setValueAt("0", 3, 5);
        model.setValueAt("0", 4, 5);
        model.setValueAt("0", 9, 5);
        model.setValueAt("0", 0, 6);
        model.setValueAt("0", 5, 6);
        model.setValueAt("0", 6, 6);
        model.setValueAt("-50", 1, 7);
        model.setValueAt("-50", 5, 7);
        model.setValueAt("-50", 6, 7);
        model.setValueAt("-50", 7, 7);
        model.setValueAt("-50", 10, 7);
        model.setValueAt("0", 2, 8);
        model.setValueAt("0", 6, 8);
        model.setValueAt("0", 7, 8);
        model.setValueAt("0", 8, 8);
        model.setValueAt("0", 11, 8);
        model.setValueAt("0", 3, 9);
        model.setValueAt("0", 7, 9);
        model.setValueAt("0", 8, 9);
        model.setValueAt("0", 9, 9);
        model.setValueAt("0", 12, 9);
        model.setValueAt("0", 4, 10);
        model.setValueAt("0", 8, 10);
        model.setValueAt("0", 9, 10);
        model.setValueAt("0", 13, 10);
        model.setValueAt("0", 6, 11);
        model.setValueAt("0", 10, 11);
        model.setValueAt("0", 11, 11);
        model.setValueAt("0", 15, 11);
        model.setValueAt("0", 7, 12);
        model.setValueAt("0", 10, 12);
        model.setValueAt("0", 11, 12);
        model.setValueAt("0", 12, 12);
        model.setValueAt("0", 16, 12);
        model.setValueAt("0", 8, 13);
        model.setValueAt("0", 11, 13);
        model.setValueAt("0", 12, 13);
        model.setValueAt("0", 13, 13);
        model.setValueAt("0", 9, 14);
        model.setValueAt("0", 12, 14);
        model.setValueAt("0", 13, 14);
        model.setValueAt("0", 14, 15);
        model.setValueAt("0", 15, 15);
        model.setValueAt("0", 17, 15);
        model.setValueAt("0", 10, 16);
        model.setValueAt("0", 14, 16);
        model.setValueAt("0", 15, 16);
        model.setValueAt("0", 16, 16);
        model.setValueAt("0", 18, 16);
        model.setValueAt("-100", 11, 17);
        model.setValueAt("-100", 15, 17);
        model.setValueAt("-100", 16, 17);
        model.setValueAt("-100", 19, 17);
        model.setValueAt("0", 14, 18);
        model.setValueAt("0", 17, 18);
        model.setValueAt("0", 18, 18);
        model.setValueAt("0", 15, 19);
        model.setValueAt("0", 17, 19);
        model.setValueAt("0", 18, 19);
        model.setValueAt("0", 19, 19);
        model.setValueAt("0", 16, 20);
        model.setValueAt("0", 18, 20);
        model.setValueAt("0", 19, 20);
        model.setValueAt("0", 20, 20);
        model.setValueAt("0", 19, 21);
        model.setValueAt("0", 20, 21);
        model.setValueAt("0", 21, 21);
        model.setValueAt("100", 20, 22);
        model.setValueAt("100", 21, 22);
        */
        rMatrix.repaint();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox algorithmComboBox;
    private javax.swing.JTextField alphaJTextField;
    private javax.swing.JTextField episodesJTextField;
    private javax.swing.JTextField epsilonJTextField;
    private javax.swing.JMenuItem exportMatricesMenuItem;
    private javax.swing.JMenuItem exportMenuItem;
    private javax.swing.JTextField gammaJTextField;
    private javax.swing.JTextField goalStateJTextField;
    private javax.swing.JTextField initialStateJTextField;
    private javax.swing.JButton interruptButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JTextField matrixSizeTextField;
    private javax.swing.JButton newMatrixButton;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JComboBox policyComboBox;
    private javax.swing.JTable qMatrix;
    private javax.swing.JScrollPane qMatrixScrollPane;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JTable rMatrix;
    private javax.swing.JScrollPane rMatrixScrollPane;
    private javax.swing.JButton resetExperimentButton;
    private javax.swing.JButton runButton;
    private javax.swing.JLabel runningJLabel;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JTextField temperatureRateJTextField;
    // End of variables declaration//GEN-END:variables
}
